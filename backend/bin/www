#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app'); // Imports the Express app instance from app.js
var debug = require('debug')('backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');

// Declare 'server' in a higher scope so it's accessible to onListening and onError
var server;

/**
 * Initialize app (database connection, routes, etc.) and create HTTP server.
 * This async function ensures the app is fully set up before the server starts listening.
 */

async function startServer() {
  try {
    // 1. Initialize the application. This calls app.initialize() from app.js
    // which handles database connection, route setup, etc.
    await app.initialize();

    // 2. Set the port on the *now fully initialized* Express app instance.
    app.set('port', port);

    // 3. Create the HTTP server using the fully configured app.
    // Assign to the 'server' variable declared in the higher scope.
    server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

  } catch (error) {
    // If any part of the app initialization or server creation fails, log and exit.
    console.error('CRITICAL ERROR: Failed to start server due to initialization failure:', error);
    process.exit(1);
  }
}

// Call the async function to start the server.
startServer();


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address(); // 'server' is now defined due to higher scope
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Backend server listening on ${bind}`); // Added for clearer console output
}

